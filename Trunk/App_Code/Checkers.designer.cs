#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[System.Data.Linq.Mapping.DatabaseAttribute(Name="Checkers")]
public partial class CheckersDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertActivity(Activity instance);
  partial void UpdateActivity(Activity instance);
  partial void DeleteActivity(Activity instance);
  partial void InsertToken(Token instance);
  partial void UpdateToken(Token instance);
  partial void DeleteToken(Token instance);
  partial void InsertCatalog(Catalog instance);
  partial void UpdateCatalog(Catalog instance);
  partial void DeleteCatalog(Catalog instance);
  partial void InsertContact(Contact instance);
  partial void UpdateContact(Contact instance);
  partial void DeleteContact(Contact instance);
  partial void InsertContent(Content instance);
  partial void UpdateContent(Content instance);
  partial void DeleteContent(Content instance);
  partial void InsertConverter(Converter instance);
  partial void UpdateConverter(Converter instance);
  partial void DeleteConverter(Converter instance);
  partial void InsertEvent(Event instance);
  partial void UpdateEvent(Event instance);
  partial void DeleteEvent(Event instance);
  partial void InsertInventory(Inventory instance);
  partial void UpdateInventory(Inventory instance);
  partial void DeleteInventory(Inventory instance);
  partial void InsertInvoice(Invoice instance);
  partial void UpdateInvoice(Invoice instance);
  partial void DeleteInvoice(Invoice instance);
  partial void InsertMenu(Menu instance);
  partial void UpdateMenu(Menu instance);
  partial void DeleteMenu(Menu instance);
  partial void InsertPackage(Package instance);
  partial void UpdatePackage(Package instance);
  partial void DeletePackage(Package instance);
  partial void InsertPettyCash(PettyCash instance);
  partial void UpdatePettyCash(PettyCash instance);
  partial void DeletePettyCash(PettyCash instance);
  partial void InsertPettyExpense(PettyExpense instance);
  partial void UpdatePettyExpense(PettyExpense instance);
  partial void DeletePettyExpense(PettyExpense instance);
  partial void InsertPurchase(Purchase instance);
  partial void UpdatePurchase(Purchase instance);
  partial void DeletePurchase(Purchase instance);
  partial void InsertSale(Sale instance);
  partial void UpdateSale(Sale instance);
  partial void DeleteSale(Sale instance);
  partial void InsertSource(Source instance);
  partial void UpdateSource(Source instance);
  partial void DeleteSource(Source instance);
  #endregion
	
	public CheckersDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["CheckersConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public CheckersDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public CheckersDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public CheckersDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public CheckersDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Activity> Activities
	{
		get
		{
			return this.GetTable<Activity>();
		}
	}
	
	public System.Data.Linq.Table<Token> Tokens
	{
		get
		{
			return this.GetTable<Token>();
		}
	}
	
	public System.Data.Linq.Table<Catalog> Catalogs
	{
		get
		{
			return this.GetTable<Catalog>();
		}
	}
	
	public System.Data.Linq.Table<Contact> Contacts
	{
		get
		{
			return this.GetTable<Contact>();
		}
	}
	
	public System.Data.Linq.Table<Content> Contents
	{
		get
		{
			return this.GetTable<Content>();
		}
	}
	
	public System.Data.Linq.Table<Converter> Converters
	{
		get
		{
			return this.GetTable<Converter>();
		}
	}
	
	public System.Data.Linq.Table<Event> Events
	{
		get
		{
			return this.GetTable<Event>();
		}
	}
	
	public System.Data.Linq.Table<Inventory> Inventories
	{
		get
		{
			return this.GetTable<Inventory>();
		}
	}
	
	public System.Data.Linq.Table<Invoice> Invoices
	{
		get
		{
			return this.GetTable<Invoice>();
		}
	}
	
	public System.Data.Linq.Table<Menu> Menus
	{
		get
		{
			return this.GetTable<Menu>();
		}
	}
	
	public System.Data.Linq.Table<Package> Packages
	{
		get
		{
			return this.GetTable<Package>();
		}
	}
	
	public System.Data.Linq.Table<PettyCash> PettyCashes
	{
		get
		{
			return this.GetTable<PettyCash>();
		}
	}
	
	public System.Data.Linq.Table<PettyExpense> PettyExpenses
	{
		get
		{
			return this.GetTable<PettyExpense>();
		}
	}
	
	public System.Data.Linq.Table<Purchase> Purchases
	{
		get
		{
			return this.GetTable<Purchase>();
		}
	}
	
	public System.Data.Linq.Table<Sale> Sales
	{
		get
		{
			return this.GetTable<Sale>();
		}
	}
	
	public System.Data.Linq.Table<Source> Sources
	{
		get
		{
			return this.GetTable<Source>();
		}
	}
	
	[Function(Name="dbo.TokenNew")]
	public int TokenNew([Parameter(Name="Type", DbType="VarChar(50)")] string type, [Parameter(Name="Menu", DbType="Int")] System.Nullable<int> menu, [Parameter(Name="Quantity", DbType="Decimal")] System.Nullable<decimal> quantity, [Parameter(Name="Source", DbType="Int")] System.Nullable<int> source)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), type, menu, quantity, source);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.ActivityNew")]
	public int ActivityNew([Parameter(Name="Action", DbType="VarChar(1000)")] string action, [Parameter(Name="User", DbType="Int")] System.Nullable<int> user)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), action, user);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.CatalogDelete")]
	public int CatalogDelete([Parameter(Name="Id", DbType="Int")] System.Nullable<int> id)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.CatalogEdit")]
	public int CatalogEdit([Parameter(Name="Id", DbType="Int")] System.Nullable<int> id, [Parameter(Name="Name", DbType="VarChar(100)")] string name, [Parameter(Name="Type", DbType="VarChar(50)")] string type)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, type);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.CatalogNew")]
	public int CatalogNew([Parameter(Name="Id", DbType="Int")] System.Nullable<int> id, [Parameter(Name="Name", DbType="VarChar(100)")] string name, [Parameter(Name="Type", DbType="VarChar(50)")] string type)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, type);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.ChangePassword")]
	public int ChangePassword([Parameter(Name="Id", DbType="Int")] System.Nullable<int> id, [Parameter(Name="OldPassword", DbType="VarChar(100)")] string oldPassword, [Parameter(Name="NewPassword", DbType="VarChar(100)")] string newPassword)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, oldPassword, newPassword);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.ContactDelete")]
	public int ContactDelete([Parameter(Name="Id", DbType="Int")] System.Nullable<int> id)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.ContactEdit")]
	public int ContactEdit([Parameter(Name="Id", DbType="Int")] System.Nullable<int> id, [Parameter(Name="Name", DbType="VarChar(100)")] string name, [Parameter(Name="UserName", DbType="VarChar(100)")] string userName, [Parameter(Name="Password", DbType="VarChar(100)")] string password, [Parameter(Name="Type", DbType="VarChar(100)")] string type, [Parameter(Name="Phone", DbType="VarChar(100)")] string phone, [Parameter(Name="Address", DbType="VarChar(200)")] string address, [Parameter(Name="Email", DbType="VarChar(100)")] string email, [Parameter(Name="OrganizationName", DbType="VarChar(100)")] string organizationName, [Parameter(Name="OrganizationAddress", DbType="VarChar(200)")] string organizationAddress, [Parameter(Name="OrganizationPhone", DbType="VarChar(100)")] string organizationPhone)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, userName, password, type, phone, address, email, organizationName, organizationAddress, organizationPhone);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.ContactNew")]
	public int ContactNew([Parameter(Name="Id", DbType="Int")] System.Nullable<int> id, [Parameter(Name="Name", DbType="VarChar(100)")] string name, [Parameter(Name="UserName", DbType="VarChar(100)")] string userName, [Parameter(Name="Password", DbType="VarChar(100)")] string password, [Parameter(Name="Type", DbType="VarChar(100)")] string type, [Parameter(Name="Phone", DbType="VarChar(100)")] string phone, [Parameter(Name="Address", DbType="VarChar(200)")] string address, [Parameter(Name="Email", DbType="VarChar(100)")] string email, [Parameter(Name="OrganizationName", DbType="VarChar(100)")] string organizationName, [Parameter(Name="OrganizationAddress", DbType="VarChar(200)")] string organizationAddress, [Parameter(Name="OrganizationPhone", DbType="VarChar(100)")] string organizationPhone)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, userName, password, type, phone, address, email, organizationName, organizationAddress, organizationPhone);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.ConverterDelete")]
	public int ConverterDelete([Parameter(Name="Id", DbType="Int")] System.Nullable<int> id)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.ConverterEdit")]
	public int ConverterEdit([Parameter(Name="Id", DbType="Int")] System.Nullable<int> id, [Parameter(Name="Menu", DbType="Int")] System.Nullable<int> menu, [Parameter(Name="Inventory", DbType="Int")] System.Nullable<int> inventory, [Parameter(Name="InventoryQuantity", DbType="Decimal")] System.Nullable<decimal> inventoryQuantity)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, menu, inventory, inventoryQuantity);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.ConverterNew")]
	public int ConverterNew([Parameter(Name="Menu", DbType="Int")] System.Nullable<int> menu, [Parameter(Name="Inventory", DbType="Int")] System.Nullable<int> inventory, [Parameter(Name="InventoryQuantity", DbType="Decimal")] System.Nullable<decimal> inventoryQuantity)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), menu, inventory, inventoryQuantity);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.EventDelete")]
	public int EventDelete([Parameter(Name="Id", DbType="Int")] System.Nullable<int> id)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.EventEdit")]
	public int EventEdit([Parameter(Name="Id", DbType="Int")] System.Nullable<int> id, [Parameter(Name="Name", DbType="VarChar(100)")] string name, [Parameter(Name="From", DbType="DateTime")] System.Nullable<System.DateTime> from, [Parameter(Name="To", DbType="DateTime")] System.Nullable<System.DateTime> to, [Parameter(Name="Organizer", DbType="Int")] System.Nullable<int> organizer, [Parameter(Name="Venue", DbType="VarChar(100)")] string venue)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, from, to, organizer, venue);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.EventNew")]
	public int EventNew([Parameter(Name="Name", DbType="VarChar(100)")] string name, [Parameter(Name="From", DbType="DateTime")] System.Nullable<System.DateTime> from, [Parameter(Name="To", DbType="DateTime")] System.Nullable<System.DateTime> to, [Parameter(Name="Organizer", DbType="Int")] System.Nullable<int> organizer, [Parameter(Name="Venue", DbType="VarChar(100)")] string venue)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name, from, to, organizer, venue);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.InventoryAdd")]
	public int InventoryAdd([Parameter(Name="Id", DbType="Int")] System.Nullable<int> id, [Parameter(Name="Quantity", DbType="Decimal")] System.Nullable<decimal> quantity)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, quantity);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.InventoryDelete")]
	public int InventoryDelete([Parameter(Name="Id", DbType="Int")] System.Nullable<int> id)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.InventoryEdit")]
	public int InventoryEdit([Parameter(Name="Id", DbType="Int")] System.Nullable<int> id, [Parameter(Name="Name", DbType="VarChar(100)")] string name, [Parameter(Name="BuyingPrice", DbType="Decimal")] System.Nullable<decimal> buyingPrice, [Parameter(Name="Threshold", DbType="Decimal")] System.Nullable<decimal> threshold, [Parameter(Name="PurchaseUnit", DbType="VarChar(100)")] string purchaseUnit, [Parameter(Name="ConversionUnit", DbType="Decimal")] System.Nullable<decimal> conversionUnit)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, buyingPrice, threshold, purchaseUnit, conversionUnit);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.InventoryNew")]
	public int InventoryNew([Parameter(Name="Name", DbType="VarChar(100)")] string name, [Parameter(Name="BuyingPrice", DbType="Decimal")] System.Nullable<decimal> buyingPrice, [Parameter(Name="Threshold", DbType="Decimal")] System.Nullable<decimal> threshold, [Parameter(Name="PurchaseUnit", DbType="VarChar(100)")] string purchaseUnit, [Parameter(Name="ConversionUnit", DbType="Decimal")] System.Nullable<decimal> conversionUnit)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name, buyingPrice, threshold, purchaseUnit, conversionUnit);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.InventorySubtract")]
	public int InventorySubtract([Parameter(Name="Id", DbType="Int")] System.Nullable<int> id, [Parameter(Name="Quantity", DbType="Decimal")] System.Nullable<decimal> quantity)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, quantity);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.InvoiceClose")]
	public int InvoiceClose([Parameter(Name="Id", DbType="Int")] System.Nullable<int> id, [Parameter(Name="Source", DbType="Int")] System.Nullable<int> source, [Parameter(Name="PaymentMode", DbType="VarChar(100)")] string paymentMode)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, source, paymentMode);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.InvoiceCloseCredit")]
	public int InvoiceCloseCredit([Parameter(Name="Id", DbType="Int")] System.Nullable<int> id, [Parameter(Name="ClientId", DbType="Int")] System.Nullable<int> clientId, [Parameter(Name="Source", DbType="Int")] System.Nullable<int> source)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, clientId, source);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.InvoiceCloseZeroBilling")]
	public int InvoiceCloseZeroBilling([Parameter(Name="Id", DbType="Int")] System.Nullable<int> id, [Parameter(Name="Source", DbType="Int")] System.Nullable<int> source)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, source);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.InvoiceDelete")]
	public int InvoiceDelete([Parameter(Name="Id", DbType="Int")] System.Nullable<int> id, [Parameter(Name="Source", DbType="Int")] System.Nullable<int> source, [Parameter(Name="Reason", DbType="VarChar(200)")] string reason)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, source, reason);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.InvoiceEdit")]
	public int InvoiceEdit([Parameter(Name="Id", DbType="Int")] System.Nullable<int> id, [Parameter(Name="Amount", DbType="Decimal")] System.Nullable<decimal> amount, [Parameter(Name="Discount", DbType="Decimal")] System.Nullable<decimal> discount, [Parameter(Name="Tax", DbType="Decimal")] System.Nullable<decimal> tax, [Parameter(Name="Type", DbType="VarChar(100)")] string type, [Parameter(Name="Source", DbType="Int")] System.Nullable<int> source, [Parameter(Name="PaymentMode", DbType="VarChar(100)")] string paymentMode, [Parameter(Name="Status", DbType="Int")] System.Nullable<int> status, [Parameter(Name="Reason", DbType="VarChar(200)")] string reason)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, amount, discount, tax, type, source, paymentMode, status, reason);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.InvoiceNew")]
	public int InvoiceNew([Parameter(Name="Id", DbType="Int")] System.Nullable<int> id, [Parameter(Name="Amount", DbType="Decimal")] System.Nullable<decimal> amount, [Parameter(Name="Discount", DbType="Decimal")] System.Nullable<decimal> discount, [Parameter(Name="Tax", DbType="Decimal")] System.Nullable<decimal> tax, [Parameter(Name="Type", DbType="VarChar(50)")] string type, [Parameter(Name="Source", DbType="Int")] System.Nullable<int> source, [Parameter(Name="PaymentMode", DbType="VarChar(100)")] string paymentMode)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, amount, discount, tax, type, source, paymentMode);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.MenuDelete")]
	public int MenuDelete([Parameter(Name="Id", DbType="Int")] System.Nullable<int> id)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.MenuEdit")]
	public int MenuEdit([Parameter(Name="Id", DbType="Int")] System.Nullable<int> id, [Parameter(Name="Name", DbType="VarChar(100)")] string name, [Parameter(Name="Category", DbType="VarChar(100)")] string category, [Parameter(Name="Price", DbType="Decimal")] System.Nullable<decimal> price)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, category, price);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.MenuNew")]
	public int MenuNew([Parameter(Name="Id", DbType="Int")] System.Nullable<int> id, [Parameter(Name="Name", DbType="VarChar(100)")] string name, [Parameter(Name="Category", DbType="VarChar(100)")] string category, [Parameter(Name="Price", DbType="Decimal")] System.Nullable<decimal> price)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, category, price);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.PackageDelete")]
	public int PackageDelete([Parameter(Name="Id", DbType="Int")] System.Nullable<int> id)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.PackageEdit")]
	public int PackageEdit([Parameter(Name="Id", DbType="Int")] System.Nullable<int> id, [Parameter(Name="Name", DbType="VarChar(100)")] string name, [Parameter(Name="Type", DbType="VarChar(50)")] string type, [Parameter(Name="Comments", DbType="VarChar(200)")] string comments)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, type, comments);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.PackageNew")]
	public int PackageNew([Parameter(Name="Name", DbType="VarChar(100)")] string name, [Parameter(Name="Type", DbType="VarChar(50)")] string type, [Parameter(Name="Comments", DbType="VarChar(200)")] string comments)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name, type, comments);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.PettyCashNew")]
	public int PettyCashNew([Parameter(Name="Amount", DbType="Decimal")] System.Nullable<decimal> amount, [Parameter(Name="GivenBy", DbType="Int")] System.Nullable<int> givenBy, [Parameter(Name="ReceivedBy", DbType="Int")] System.Nullable<int> receivedBy)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), amount, givenBy, receivedBy);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.PettyExpenseNew")]
	public int PettyExpenseNew([Parameter(Name="Amount", DbType="Decimal")] System.Nullable<decimal> amount, [Parameter(Name="Merchandise", DbType="VarChar(200)")] string merchandise, [Parameter(Name="Quantity", DbType="Decimal")] System.Nullable<decimal> quantity, [Parameter(Name="ReceivedBy", DbType="Int")] System.Nullable<int> receivedBy)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), amount, merchandise, quantity, receivedBy);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.PurchaseDelete")]
	public int PurchaseDelete([Parameter(Name="Id", DbType="Int")] System.Nullable<int> id)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.PurchaseEdit")]
	public int PurchaseEdit([Parameter(Name="Id", DbType="Int")] System.Nullable<int> id, [Parameter(Name="Inventory", DbType="Int")] System.Nullable<int> inventory, [Parameter(Name="Quantity", DbType="Decimal")] System.Nullable<decimal> quantity)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, inventory, quantity);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.PurchaseNew")]
	public int PurchaseNew([Parameter(Name="Inventory", DbType="Int")] System.Nullable<int> inventory, [Parameter(Name="Quantity", DbType="Decimal")] System.Nullable<decimal> quantity)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), inventory, quantity);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.ReceiptDelete")]
	public int ReceiptDelete([Parameter(Name="Id", DbType="Int")] System.Nullable<int> id, [Parameter(Name="ClientId", DbType="Int")] System.Nullable<int> clientId)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, clientId);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.ReceiptNew")]
	public int ReceiptNew([Parameter(Name="Amount", DbType="Decimal")] System.Nullable<decimal> amount, [Parameter(Name="PaymentMode", DbType="VarChar(100)")] string paymentMode, [Parameter(Name="ClientId", DbType="Int")] System.Nullable<int> clientId)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), amount, paymentMode, clientId);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.SalesDelete")]
	public int SalesDelete([Parameter(Name="Id", DbType="Int")] System.Nullable<int> id, [Parameter(Name="Menu", DbType="Int")] System.Nullable<int> menu, [Parameter(Name="Quantity", DbType="Decimal")] System.Nullable<decimal> quantity, [Parameter(Name="Source", DbType="Int")] System.Nullable<int> source, [Parameter(Name="SourceType", DbType="VarChar(100)")] string sourceType)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, menu, quantity, source, sourceType);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.SalesEdit")]
	public int SalesEdit([Parameter(Name="Id", DbType="Int")] System.Nullable<int> id, [Parameter(Name="Menu", DbType="Int")] System.Nullable<int> menu, [Parameter(Name="Quantity", DbType="Decimal")] System.Nullable<decimal> quantity, [Parameter(Name="Source", DbType="Int")] System.Nullable<int> source, [Parameter(Name="SourceType", DbType="VarChar(100)")] string sourceType, [Parameter(Name="Package", DbType="Int")] System.Nullable<int> package)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, menu, quantity, source, sourceType, package);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.SalesNew")]
	public int SalesNew([Parameter(Name="Id", DbType="Int")] System.Nullable<int> id, [Parameter(Name="Menu", DbType="Int")] System.Nullable<int> menu, [Parameter(Name="Quantity", DbType="Decimal")] System.Nullable<decimal> quantity, [Parameter(Name="Source", DbType="Int")] System.Nullable<int> source, [Parameter(Name="SourceType", DbType="VarChar(100)")] string sourceType, [Parameter(Name="Package", DbType="Int")] System.Nullable<int> package)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, menu, quantity, source, sourceType, package);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.SelectItemByType")]
	public int SelectItemByType([Parameter(Name="Type", DbType="VarChar(100)")] string type)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), type);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.SpContent")]
	public int SpContent([Parameter(Name="Id", DbType="Int")] System.Nullable<int> id, [Parameter(Name="Material", DbType="Int")] System.Nullable<int> material, [Parameter(Name="Quantity", DbType="Decimal")] System.Nullable<decimal> quantity, [Parameter(Name="UnitPrice", DbType="Decimal")] System.Nullable<decimal> unitPrice, [Parameter(Name="Discount", DbType="Decimal")] System.Nullable<decimal> discount, [Parameter(Name="Cost", DbType="Decimal")] System.Nullable<decimal> cost, [Parameter(Name="Package", DbType="Int")] System.Nullable<int> package, [Parameter(Name="Status", DbType="Int")] System.Nullable<int> status, [Parameter(Name="Operation", DbType="VarChar(50)")] string operation)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, material, quantity, unitPrice, discount, cost, package, status, operation);
		return ((int)(result.ReturnValue));
	}
}

[Table(Name="dbo.Activity")]
public partial class Activity : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Activity_Id;
	
	private string _Activity_Action;
	
	private System.Nullable<int> _Activity_User;
	
	private System.Nullable<System.DateTime> _Activity_TimeStamp;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActivity_IdChanging(int value);
    partial void OnActivity_IdChanged();
    partial void OnActivity_ActionChanging(string value);
    partial void OnActivity_ActionChanged();
    partial void OnActivity_UserChanging(System.Nullable<int> value);
    partial void OnActivity_UserChanged();
    partial void OnActivity_TimeStampChanging(System.Nullable<System.DateTime> value);
    partial void OnActivity_TimeStampChanged();
    #endregion
	
	public Activity()
	{
		OnCreated();
	}
	
	[Column(Storage="_Activity_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Activity_Id
	{
		get
		{
			return this._Activity_Id;
		}
		set
		{
			if ((this._Activity_Id != value))
			{
				this.OnActivity_IdChanging(value);
				this.SendPropertyChanging();
				this._Activity_Id = value;
				this.SendPropertyChanged("Activity_Id");
				this.OnActivity_IdChanged();
			}
		}
	}
	
	[Column(Storage="_Activity_Action", DbType="VarChar(1000)")]
	public string Activity_Action
	{
		get
		{
			return this._Activity_Action;
		}
		set
		{
			if ((this._Activity_Action != value))
			{
				this.OnActivity_ActionChanging(value);
				this.SendPropertyChanging();
				this._Activity_Action = value;
				this.SendPropertyChanged("Activity_Action");
				this.OnActivity_ActionChanged();
			}
		}
	}
	
	[Column(Storage="_Activity_User", DbType="Int")]
	public System.Nullable<int> Activity_User
	{
		get
		{
			return this._Activity_User;
		}
		set
		{
			if ((this._Activity_User != value))
			{
				this.OnActivity_UserChanging(value);
				this.SendPropertyChanging();
				this._Activity_User = value;
				this.SendPropertyChanged("Activity_User");
				this.OnActivity_UserChanged();
			}
		}
	}
	
	[Column(Storage="_Activity_TimeStamp", DbType="DateTime")]
	public System.Nullable<System.DateTime> Activity_TimeStamp
	{
		get
		{
			return this._Activity_TimeStamp;
		}
		set
		{
			if ((this._Activity_TimeStamp != value))
			{
				this.OnActivity_TimeStampChanging(value);
				this.SendPropertyChanging();
				this._Activity_TimeStamp = value;
				this.SendPropertyChanged("Activity_TimeStamp");
				this.OnActivity_TimeStampChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Token")]
public partial class Token : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Token_Id;
	
	private string _Token_Type;
	
	private System.Nullable<int> _Token_Menu;
	
	private System.Nullable<decimal> _Token_Quantity;
	
	private System.Nullable<int> _Token_Source;
	
	private System.Nullable<int> _Token_Status;
	
	private System.Nullable<System.DateTime> _Token_TimeStamp;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnToken_IdChanging(int value);
    partial void OnToken_IdChanged();
    partial void OnToken_TypeChanging(string value);
    partial void OnToken_TypeChanged();
    partial void OnToken_MenuChanging(System.Nullable<int> value);
    partial void OnToken_MenuChanged();
    partial void OnToken_QuantityChanging(System.Nullable<decimal> value);
    partial void OnToken_QuantityChanged();
    partial void OnToken_SourceChanging(System.Nullable<int> value);
    partial void OnToken_SourceChanged();
    partial void OnToken_StatusChanging(System.Nullable<int> value);
    partial void OnToken_StatusChanged();
    partial void OnToken_TimeStampChanging(System.Nullable<System.DateTime> value);
    partial void OnToken_TimeStampChanged();
    #endregion
	
	public Token()
	{
		OnCreated();
	}
	
	[Column(Storage="_Token_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Token_Id
	{
		get
		{
			return this._Token_Id;
		}
		set
		{
			if ((this._Token_Id != value))
			{
				this.OnToken_IdChanging(value);
				this.SendPropertyChanging();
				this._Token_Id = value;
				this.SendPropertyChanged("Token_Id");
				this.OnToken_IdChanged();
			}
		}
	}
	
	[Column(Storage="_Token_Type", DbType="VarChar(50)")]
	public string Token_Type
	{
		get
		{
			return this._Token_Type;
		}
		set
		{
			if ((this._Token_Type != value))
			{
				this.OnToken_TypeChanging(value);
				this.SendPropertyChanging();
				this._Token_Type = value;
				this.SendPropertyChanged("Token_Type");
				this.OnToken_TypeChanged();
			}
		}
	}
	
	[Column(Storage="_Token_Menu", DbType="Int")]
	public System.Nullable<int> Token_Menu
	{
		get
		{
			return this._Token_Menu;
		}
		set
		{
			if ((this._Token_Menu != value))
			{
				this.OnToken_MenuChanging(value);
				this.SendPropertyChanging();
				this._Token_Menu = value;
				this.SendPropertyChanged("Token_Menu");
				this.OnToken_MenuChanged();
			}
		}
	}
	
	[Column(Storage="_Token_Quantity", DbType="Decimal(6,2)")]
	public System.Nullable<decimal> Token_Quantity
	{
		get
		{
			return this._Token_Quantity;
		}
		set
		{
			if ((this._Token_Quantity != value))
			{
				this.OnToken_QuantityChanging(value);
				this.SendPropertyChanging();
				this._Token_Quantity = value;
				this.SendPropertyChanged("Token_Quantity");
				this.OnToken_QuantityChanged();
			}
		}
	}
	
	[Column(Storage="_Token_Source", DbType="Int")]
	public System.Nullable<int> Token_Source
	{
		get
		{
			return this._Token_Source;
		}
		set
		{
			if ((this._Token_Source != value))
			{
				this.OnToken_SourceChanging(value);
				this.SendPropertyChanging();
				this._Token_Source = value;
				this.SendPropertyChanged("Token_Source");
				this.OnToken_SourceChanged();
			}
		}
	}
	
	[Column(Storage="_Token_Status", DbType="Int")]
	public System.Nullable<int> Token_Status
	{
		get
		{
			return this._Token_Status;
		}
		set
		{
			if ((this._Token_Status != value))
			{
				this.OnToken_StatusChanging(value);
				this.SendPropertyChanging();
				this._Token_Status = value;
				this.SendPropertyChanged("Token_Status");
				this.OnToken_StatusChanged();
			}
		}
	}
	
	[Column(Storage="_Token_TimeStamp", DbType="DateTime")]
	public System.Nullable<System.DateTime> Token_TimeStamp
	{
		get
		{
			return this._Token_TimeStamp;
		}
		set
		{
			if ((this._Token_TimeStamp != value))
			{
				this.OnToken_TimeStampChanging(value);
				this.SendPropertyChanging();
				this._Token_TimeStamp = value;
				this.SendPropertyChanged("Token_TimeStamp");
				this.OnToken_TimeStampChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Catalog")]
public partial class Catalog : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Catalog_Id;
	
	private string _Catalog_Name;
	
	private string _Catalog_Type;
	
	private System.Nullable<int> _Catalog_Status;
	
	private System.Nullable<System.DateTime> _Catalog_TimeStamp;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCatalog_IdChanging(int value);
    partial void OnCatalog_IdChanged();
    partial void OnCatalog_NameChanging(string value);
    partial void OnCatalog_NameChanged();
    partial void OnCatalog_TypeChanging(string value);
    partial void OnCatalog_TypeChanged();
    partial void OnCatalog_StatusChanging(System.Nullable<int> value);
    partial void OnCatalog_StatusChanged();
    partial void OnCatalog_TimeStampChanging(System.Nullable<System.DateTime> value);
    partial void OnCatalog_TimeStampChanged();
    #endregion
	
	public Catalog()
	{
		OnCreated();
	}
	
	[Column(Storage="_Catalog_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Catalog_Id
	{
		get
		{
			return this._Catalog_Id;
		}
		set
		{
			if ((this._Catalog_Id != value))
			{
				this.OnCatalog_IdChanging(value);
				this.SendPropertyChanging();
				this._Catalog_Id = value;
				this.SendPropertyChanged("Catalog_Id");
				this.OnCatalog_IdChanged();
			}
		}
	}
	
	[Column(Storage="_Catalog_Name", DbType="VarChar(100)")]
	public string Catalog_Name
	{
		get
		{
			return this._Catalog_Name;
		}
		set
		{
			if ((this._Catalog_Name != value))
			{
				this.OnCatalog_NameChanging(value);
				this.SendPropertyChanging();
				this._Catalog_Name = value;
				this.SendPropertyChanged("Catalog_Name");
				this.OnCatalog_NameChanged();
			}
		}
	}
	
	[Column(Storage="_Catalog_Type", DbType="VarChar(50)")]
	public string Catalog_Type
	{
		get
		{
			return this._Catalog_Type;
		}
		set
		{
			if ((this._Catalog_Type != value))
			{
				this.OnCatalog_TypeChanging(value);
				this.SendPropertyChanging();
				this._Catalog_Type = value;
				this.SendPropertyChanged("Catalog_Type");
				this.OnCatalog_TypeChanged();
			}
		}
	}
	
	[Column(Storage="_Catalog_Status", DbType="Int")]
	public System.Nullable<int> Catalog_Status
	{
		get
		{
			return this._Catalog_Status;
		}
		set
		{
			if ((this._Catalog_Status != value))
			{
				this.OnCatalog_StatusChanging(value);
				this.SendPropertyChanging();
				this._Catalog_Status = value;
				this.SendPropertyChanged("Catalog_Status");
				this.OnCatalog_StatusChanged();
			}
		}
	}
	
	[Column(Storage="_Catalog_TimeStamp", DbType="DateTime")]
	public System.Nullable<System.DateTime> Catalog_TimeStamp
	{
		get
		{
			return this._Catalog_TimeStamp;
		}
		set
		{
			if ((this._Catalog_TimeStamp != value))
			{
				this.OnCatalog_TimeStampChanging(value);
				this.SendPropertyChanging();
				this._Catalog_TimeStamp = value;
				this.SendPropertyChanged("Catalog_TimeStamp");
				this.OnCatalog_TimeStampChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Contact")]
public partial class Contact : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Contact_Id;
	
	private string _Contact_Name;
	
	private string _Contact_UserName;
	
	private string _Contact_Password;
	
	private string _Contact_Type;
	
	private string _Contact_Phone;
	
	private string _Contact_Address;
	
	private string _Contact_Email;
	
	private string _Contact_OrganizationName;
	
	private string _Contact_OrganizationPhone;
	
	private string _Contact_OrganizationAddress;
	
	private System.Nullable<decimal> _Contact_Credit;
	
	private System.Nullable<int> _Contact_Status;
	
	private System.Nullable<System.DateTime> _Contact_TimeStamp;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContact_IdChanging(int value);
    partial void OnContact_IdChanged();
    partial void OnContact_NameChanging(string value);
    partial void OnContact_NameChanged();
    partial void OnContact_UserNameChanging(string value);
    partial void OnContact_UserNameChanged();
    partial void OnContact_PasswordChanging(string value);
    partial void OnContact_PasswordChanged();
    partial void OnContact_TypeChanging(string value);
    partial void OnContact_TypeChanged();
    partial void OnContact_PhoneChanging(string value);
    partial void OnContact_PhoneChanged();
    partial void OnContact_AddressChanging(string value);
    partial void OnContact_AddressChanged();
    partial void OnContact_EmailChanging(string value);
    partial void OnContact_EmailChanged();
    partial void OnContact_OrganizationNameChanging(string value);
    partial void OnContact_OrganizationNameChanged();
    partial void OnContact_OrganizationPhoneChanging(string value);
    partial void OnContact_OrganizationPhoneChanged();
    partial void OnContact_OrganizationAddressChanging(string value);
    partial void OnContact_OrganizationAddressChanged();
    partial void OnContact_CreditChanging(System.Nullable<decimal> value);
    partial void OnContact_CreditChanged();
    partial void OnContact_StatusChanging(System.Nullable<int> value);
    partial void OnContact_StatusChanged();
    partial void OnContact_TimeStampChanging(System.Nullable<System.DateTime> value);
    partial void OnContact_TimeStampChanged();
    #endregion
	
	public Contact()
	{
		OnCreated();
	}
	
	[Column(Storage="_Contact_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Contact_Id
	{
		get
		{
			return this._Contact_Id;
		}
		set
		{
			if ((this._Contact_Id != value))
			{
				this.OnContact_IdChanging(value);
				this.SendPropertyChanging();
				this._Contact_Id = value;
				this.SendPropertyChanged("Contact_Id");
				this.OnContact_IdChanged();
			}
		}
	}
	
	[Column(Storage="_Contact_Name", DbType="VarChar(100)")]
	public string Contact_Name
	{
		get
		{
			return this._Contact_Name;
		}
		set
		{
			if ((this._Contact_Name != value))
			{
				this.OnContact_NameChanging(value);
				this.SendPropertyChanging();
				this._Contact_Name = value;
				this.SendPropertyChanged("Contact_Name");
				this.OnContact_NameChanged();
			}
		}
	}
	
	[Column(Storage="_Contact_UserName", DbType="VarChar(100)")]
	public string Contact_UserName
	{
		get
		{
			return this._Contact_UserName;
		}
		set
		{
			if ((this._Contact_UserName != value))
			{
				this.OnContact_UserNameChanging(value);
				this.SendPropertyChanging();
				this._Contact_UserName = value;
				this.SendPropertyChanged("Contact_UserName");
				this.OnContact_UserNameChanged();
			}
		}
	}
	
	[Column(Storage="_Contact_Password", DbType="VarChar(100)")]
	public string Contact_Password
	{
		get
		{
			return this._Contact_Password;
		}
		set
		{
			if ((this._Contact_Password != value))
			{
				this.OnContact_PasswordChanging(value);
				this.SendPropertyChanging();
				this._Contact_Password = value;
				this.SendPropertyChanged("Contact_Password");
				this.OnContact_PasswordChanged();
			}
		}
	}
	
	[Column(Storage="_Contact_Type", DbType="VarChar(100)")]
	public string Contact_Type
	{
		get
		{
			return this._Contact_Type;
		}
		set
		{
			if ((this._Contact_Type != value))
			{
				this.OnContact_TypeChanging(value);
				this.SendPropertyChanging();
				this._Contact_Type = value;
				this.SendPropertyChanged("Contact_Type");
				this.OnContact_TypeChanged();
			}
		}
	}
	
	[Column(Storage="_Contact_Phone", DbType="VarChar(100)")]
	public string Contact_Phone
	{
		get
		{
			return this._Contact_Phone;
		}
		set
		{
			if ((this._Contact_Phone != value))
			{
				this.OnContact_PhoneChanging(value);
				this.SendPropertyChanging();
				this._Contact_Phone = value;
				this.SendPropertyChanged("Contact_Phone");
				this.OnContact_PhoneChanged();
			}
		}
	}
	
	[Column(Storage="_Contact_Address", DbType="VarChar(200)")]
	public string Contact_Address
	{
		get
		{
			return this._Contact_Address;
		}
		set
		{
			if ((this._Contact_Address != value))
			{
				this.OnContact_AddressChanging(value);
				this.SendPropertyChanging();
				this._Contact_Address = value;
				this.SendPropertyChanged("Contact_Address");
				this.OnContact_AddressChanged();
			}
		}
	}
	
	[Column(Storage="_Contact_Email", DbType="VarChar(100)")]
	public string Contact_Email
	{
		get
		{
			return this._Contact_Email;
		}
		set
		{
			if ((this._Contact_Email != value))
			{
				this.OnContact_EmailChanging(value);
				this.SendPropertyChanging();
				this._Contact_Email = value;
				this.SendPropertyChanged("Contact_Email");
				this.OnContact_EmailChanged();
			}
		}
	}
	
	[Column(Storage="_Contact_OrganizationName", DbType="VarChar(100)")]
	public string Contact_OrganizationName
	{
		get
		{
			return this._Contact_OrganizationName;
		}
		set
		{
			if ((this._Contact_OrganizationName != value))
			{
				this.OnContact_OrganizationNameChanging(value);
				this.SendPropertyChanging();
				this._Contact_OrganizationName = value;
				this.SendPropertyChanged("Contact_OrganizationName");
				this.OnContact_OrganizationNameChanged();
			}
		}
	}
	
	[Column(Storage="_Contact_OrganizationPhone", DbType="VarChar(100)")]
	public string Contact_OrganizationPhone
	{
		get
		{
			return this._Contact_OrganizationPhone;
		}
		set
		{
			if ((this._Contact_OrganizationPhone != value))
			{
				this.OnContact_OrganizationPhoneChanging(value);
				this.SendPropertyChanging();
				this._Contact_OrganizationPhone = value;
				this.SendPropertyChanged("Contact_OrganizationPhone");
				this.OnContact_OrganizationPhoneChanged();
			}
		}
	}
	
	[Column(Storage="_Contact_OrganizationAddress", DbType="VarChar(200)")]
	public string Contact_OrganizationAddress
	{
		get
		{
			return this._Contact_OrganizationAddress;
		}
		set
		{
			if ((this._Contact_OrganizationAddress != value))
			{
				this.OnContact_OrganizationAddressChanging(value);
				this.SendPropertyChanging();
				this._Contact_OrganizationAddress = value;
				this.SendPropertyChanged("Contact_OrganizationAddress");
				this.OnContact_OrganizationAddressChanged();
			}
		}
	}
	
	[Column(Storage="_Contact_Credit", DbType="Decimal(6,2)")]
	public System.Nullable<decimal> Contact_Credit
	{
		get
		{
			return this._Contact_Credit;
		}
		set
		{
			if ((this._Contact_Credit != value))
			{
				this.OnContact_CreditChanging(value);
				this.SendPropertyChanging();
				this._Contact_Credit = value;
				this.SendPropertyChanged("Contact_Credit");
				this.OnContact_CreditChanged();
			}
		}
	}
	
	[Column(Storage="_Contact_Status", DbType="Int")]
	public System.Nullable<int> Contact_Status
	{
		get
		{
			return this._Contact_Status;
		}
		set
		{
			if ((this._Contact_Status != value))
			{
				this.OnContact_StatusChanging(value);
				this.SendPropertyChanging();
				this._Contact_Status = value;
				this.SendPropertyChanged("Contact_Status");
				this.OnContact_StatusChanged();
			}
		}
	}
	
	[Column(Storage="_Contact_TimeStamp", DbType="DateTime")]
	public System.Nullable<System.DateTime> Contact_TimeStamp
	{
		get
		{
			return this._Contact_TimeStamp;
		}
		set
		{
			if ((this._Contact_TimeStamp != value))
			{
				this.OnContact_TimeStampChanging(value);
				this.SendPropertyChanging();
				this._Contact_TimeStamp = value;
				this.SendPropertyChanged("Contact_TimeStamp");
				this.OnContact_TimeStampChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Content")]
public partial class Content : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Content_Id;
	
	private System.Nullable<int> _Content_Material;
	
	private System.Nullable<decimal> _Content_Quantity;
	
	private System.Nullable<decimal> _Content_UnitPrice;
	
	private System.Nullable<decimal> _Content_Discount;
	
	private System.Nullable<decimal> _Content_Cost;
	
	private System.Nullable<int> _Content_Package;
	
	private System.Nullable<int> _Content_Status;
	
	private System.Nullable<System.DateTime> _Content_TimeStamp;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContent_IdChanging(int value);
    partial void OnContent_IdChanged();
    partial void OnContent_MaterialChanging(System.Nullable<int> value);
    partial void OnContent_MaterialChanged();
    partial void OnContent_QuantityChanging(System.Nullable<decimal> value);
    partial void OnContent_QuantityChanged();
    partial void OnContent_UnitPriceChanging(System.Nullable<decimal> value);
    partial void OnContent_UnitPriceChanged();
    partial void OnContent_DiscountChanging(System.Nullable<decimal> value);
    partial void OnContent_DiscountChanged();
    partial void OnContent_CostChanging(System.Nullable<decimal> value);
    partial void OnContent_CostChanged();
    partial void OnContent_PackageChanging(System.Nullable<int> value);
    partial void OnContent_PackageChanged();
    partial void OnContent_StatusChanging(System.Nullable<int> value);
    partial void OnContent_StatusChanged();
    partial void OnContent_TimeStampChanging(System.Nullable<System.DateTime> value);
    partial void OnContent_TimeStampChanged();
    #endregion
	
	public Content()
	{
		OnCreated();
	}
	
	[Column(Storage="_Content_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Content_Id
	{
		get
		{
			return this._Content_Id;
		}
		set
		{
			if ((this._Content_Id != value))
			{
				this.OnContent_IdChanging(value);
				this.SendPropertyChanging();
				this._Content_Id = value;
				this.SendPropertyChanged("Content_Id");
				this.OnContent_IdChanged();
			}
		}
	}
	
	[Column(Storage="_Content_Material", DbType="Int")]
	public System.Nullable<int> Content_Material
	{
		get
		{
			return this._Content_Material;
		}
		set
		{
			if ((this._Content_Material != value))
			{
				this.OnContent_MaterialChanging(value);
				this.SendPropertyChanging();
				this._Content_Material = value;
				this.SendPropertyChanged("Content_Material");
				this.OnContent_MaterialChanged();
			}
		}
	}
	
	[Column(Storage="_Content_Quantity", DbType="Decimal(6,2)")]
	public System.Nullable<decimal> Content_Quantity
	{
		get
		{
			return this._Content_Quantity;
		}
		set
		{
			if ((this._Content_Quantity != value))
			{
				this.OnContent_QuantityChanging(value);
				this.SendPropertyChanging();
				this._Content_Quantity = value;
				this.SendPropertyChanged("Content_Quantity");
				this.OnContent_QuantityChanged();
			}
		}
	}
	
	[Column(Storage="_Content_UnitPrice", DbType="Decimal(6,2)")]
	public System.Nullable<decimal> Content_UnitPrice
	{
		get
		{
			return this._Content_UnitPrice;
		}
		set
		{
			if ((this._Content_UnitPrice != value))
			{
				this.OnContent_UnitPriceChanging(value);
				this.SendPropertyChanging();
				this._Content_UnitPrice = value;
				this.SendPropertyChanged("Content_UnitPrice");
				this.OnContent_UnitPriceChanged();
			}
		}
	}
	
	[Column(Storage="_Content_Discount", DbType="Decimal(6,2)")]
	public System.Nullable<decimal> Content_Discount
	{
		get
		{
			return this._Content_Discount;
		}
		set
		{
			if ((this._Content_Discount != value))
			{
				this.OnContent_DiscountChanging(value);
				this.SendPropertyChanging();
				this._Content_Discount = value;
				this.SendPropertyChanged("Content_Discount");
				this.OnContent_DiscountChanged();
			}
		}
	}
	
	[Column(Storage="_Content_Cost", DbType="Decimal(6,2)")]
	public System.Nullable<decimal> Content_Cost
	{
		get
		{
			return this._Content_Cost;
		}
		set
		{
			if ((this._Content_Cost != value))
			{
				this.OnContent_CostChanging(value);
				this.SendPropertyChanging();
				this._Content_Cost = value;
				this.SendPropertyChanged("Content_Cost");
				this.OnContent_CostChanged();
			}
		}
	}
	
	[Column(Storage="_Content_Package", DbType="Int")]
	public System.Nullable<int> Content_Package
	{
		get
		{
			return this._Content_Package;
		}
		set
		{
			if ((this._Content_Package != value))
			{
				this.OnContent_PackageChanging(value);
				this.SendPropertyChanging();
				this._Content_Package = value;
				this.SendPropertyChanged("Content_Package");
				this.OnContent_PackageChanged();
			}
		}
	}
	
	[Column(Storage="_Content_Status", DbType="Int")]
	public System.Nullable<int> Content_Status
	{
		get
		{
			return this._Content_Status;
		}
		set
		{
			if ((this._Content_Status != value))
			{
				this.OnContent_StatusChanging(value);
				this.SendPropertyChanging();
				this._Content_Status = value;
				this.SendPropertyChanged("Content_Status");
				this.OnContent_StatusChanged();
			}
		}
	}
	
	[Column(Storage="_Content_TimeStamp", DbType="DateTime")]
	public System.Nullable<System.DateTime> Content_TimeStamp
	{
		get
		{
			return this._Content_TimeStamp;
		}
		set
		{
			if ((this._Content_TimeStamp != value))
			{
				this.OnContent_TimeStampChanging(value);
				this.SendPropertyChanging();
				this._Content_TimeStamp = value;
				this.SendPropertyChanged("Content_TimeStamp");
				this.OnContent_TimeStampChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Converter")]
public partial class Converter : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Converter_Id;
	
	private System.Nullable<int> _Converter_Menu;
	
	private System.Nullable<int> _Converter_Inventory;
	
	private System.Nullable<decimal> _Converter_InventoryQuantity;
	
	private System.Nullable<int> _Converter_Status;
	
	private System.Nullable<System.DateTime> _Converter_TimeStamp;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConverter_IdChanging(int value);
    partial void OnConverter_IdChanged();
    partial void OnConverter_MenuChanging(System.Nullable<int> value);
    partial void OnConverter_MenuChanged();
    partial void OnConverter_InventoryChanging(System.Nullable<int> value);
    partial void OnConverter_InventoryChanged();
    partial void OnConverter_InventoryQuantityChanging(System.Nullable<decimal> value);
    partial void OnConverter_InventoryQuantityChanged();
    partial void OnConverter_StatusChanging(System.Nullable<int> value);
    partial void OnConverter_StatusChanged();
    partial void OnConverter_TimeStampChanging(System.Nullable<System.DateTime> value);
    partial void OnConverter_TimeStampChanged();
    #endregion
	
	public Converter()
	{
		OnCreated();
	}
	
	[Column(Storage="_Converter_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Converter_Id
	{
		get
		{
			return this._Converter_Id;
		}
		set
		{
			if ((this._Converter_Id != value))
			{
				this.OnConverter_IdChanging(value);
				this.SendPropertyChanging();
				this._Converter_Id = value;
				this.SendPropertyChanged("Converter_Id");
				this.OnConverter_IdChanged();
			}
		}
	}
	
	[Column(Storage="_Converter_Menu", DbType="Int")]
	public System.Nullable<int> Converter_Menu
	{
		get
		{
			return this._Converter_Menu;
		}
		set
		{
			if ((this._Converter_Menu != value))
			{
				this.OnConverter_MenuChanging(value);
				this.SendPropertyChanging();
				this._Converter_Menu = value;
				this.SendPropertyChanged("Converter_Menu");
				this.OnConverter_MenuChanged();
			}
		}
	}
	
	[Column(Storage="_Converter_Inventory", DbType="Int")]
	public System.Nullable<int> Converter_Inventory
	{
		get
		{
			return this._Converter_Inventory;
		}
		set
		{
			if ((this._Converter_Inventory != value))
			{
				this.OnConverter_InventoryChanging(value);
				this.SendPropertyChanging();
				this._Converter_Inventory = value;
				this.SendPropertyChanged("Converter_Inventory");
				this.OnConverter_InventoryChanged();
			}
		}
	}
	
	[Column(Storage="_Converter_InventoryQuantity", DbType="Decimal(6,2)")]
	public System.Nullable<decimal> Converter_InventoryQuantity
	{
		get
		{
			return this._Converter_InventoryQuantity;
		}
		set
		{
			if ((this._Converter_InventoryQuantity != value))
			{
				this.OnConverter_InventoryQuantityChanging(value);
				this.SendPropertyChanging();
				this._Converter_InventoryQuantity = value;
				this.SendPropertyChanged("Converter_InventoryQuantity");
				this.OnConverter_InventoryQuantityChanged();
			}
		}
	}
	
	[Column(Storage="_Converter_Status", DbType="Int")]
	public System.Nullable<int> Converter_Status
	{
		get
		{
			return this._Converter_Status;
		}
		set
		{
			if ((this._Converter_Status != value))
			{
				this.OnConverter_StatusChanging(value);
				this.SendPropertyChanging();
				this._Converter_Status = value;
				this.SendPropertyChanged("Converter_Status");
				this.OnConverter_StatusChanged();
			}
		}
	}
	
	[Column(Storage="_Converter_TimeStamp", DbType="DateTime")]
	public System.Nullable<System.DateTime> Converter_TimeStamp
	{
		get
		{
			return this._Converter_TimeStamp;
		}
		set
		{
			if ((this._Converter_TimeStamp != value))
			{
				this.OnConverter_TimeStampChanging(value);
				this.SendPropertyChanging();
				this._Converter_TimeStamp = value;
				this.SendPropertyChanged("Converter_TimeStamp");
				this.OnConverter_TimeStampChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Event")]
public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Event_Id;
	
	private string _Event_Name;
	
	private System.Nullable<System.DateTime> _Event_FromTimeStamp;
	
	private System.Nullable<System.DateTime> _Event_ToTimeStamp;
	
	private System.Nullable<int> _Event_Organizer;
	
	private string _Event_Venue;
	
	private System.Nullable<int> _Event_Status;
	
	private System.Nullable<System.DateTime> _Event_TimeStamp;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEvent_IdChanging(int value);
    partial void OnEvent_IdChanged();
    partial void OnEvent_NameChanging(string value);
    partial void OnEvent_NameChanged();
    partial void OnEvent_FromTimeStampChanging(System.Nullable<System.DateTime> value);
    partial void OnEvent_FromTimeStampChanged();
    partial void OnEvent_ToTimeStampChanging(System.Nullable<System.DateTime> value);
    partial void OnEvent_ToTimeStampChanged();
    partial void OnEvent_OrganizerChanging(System.Nullable<int> value);
    partial void OnEvent_OrganizerChanged();
    partial void OnEvent_VenueChanging(string value);
    partial void OnEvent_VenueChanged();
    partial void OnEvent_StatusChanging(System.Nullable<int> value);
    partial void OnEvent_StatusChanged();
    partial void OnEvent_TimeStampChanging(System.Nullable<System.DateTime> value);
    partial void OnEvent_TimeStampChanged();
    #endregion
	
	public Event()
	{
		OnCreated();
	}
	
	[Column(Storage="_Event_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Event_Id
	{
		get
		{
			return this._Event_Id;
		}
		set
		{
			if ((this._Event_Id != value))
			{
				this.OnEvent_IdChanging(value);
				this.SendPropertyChanging();
				this._Event_Id = value;
				this.SendPropertyChanged("Event_Id");
				this.OnEvent_IdChanged();
			}
		}
	}
	
	[Column(Storage="_Event_Name", DbType="VarChar(100)")]
	public string Event_Name
	{
		get
		{
			return this._Event_Name;
		}
		set
		{
			if ((this._Event_Name != value))
			{
				this.OnEvent_NameChanging(value);
				this.SendPropertyChanging();
				this._Event_Name = value;
				this.SendPropertyChanged("Event_Name");
				this.OnEvent_NameChanged();
			}
		}
	}
	
	[Column(Storage="_Event_FromTimeStamp", DbType="DateTime")]
	public System.Nullable<System.DateTime> Event_FromTimeStamp
	{
		get
		{
			return this._Event_FromTimeStamp;
		}
		set
		{
			if ((this._Event_FromTimeStamp != value))
			{
				this.OnEvent_FromTimeStampChanging(value);
				this.SendPropertyChanging();
				this._Event_FromTimeStamp = value;
				this.SendPropertyChanged("Event_FromTimeStamp");
				this.OnEvent_FromTimeStampChanged();
			}
		}
	}
	
	[Column(Storage="_Event_ToTimeStamp", DbType="DateTime")]
	public System.Nullable<System.DateTime> Event_ToTimeStamp
	{
		get
		{
			return this._Event_ToTimeStamp;
		}
		set
		{
			if ((this._Event_ToTimeStamp != value))
			{
				this.OnEvent_ToTimeStampChanging(value);
				this.SendPropertyChanging();
				this._Event_ToTimeStamp = value;
				this.SendPropertyChanged("Event_ToTimeStamp");
				this.OnEvent_ToTimeStampChanged();
			}
		}
	}
	
	[Column(Storage="_Event_Organizer", DbType="Int")]
	public System.Nullable<int> Event_Organizer
	{
		get
		{
			return this._Event_Organizer;
		}
		set
		{
			if ((this._Event_Organizer != value))
			{
				this.OnEvent_OrganizerChanging(value);
				this.SendPropertyChanging();
				this._Event_Organizer = value;
				this.SendPropertyChanged("Event_Organizer");
				this.OnEvent_OrganizerChanged();
			}
		}
	}
	
	[Column(Storage="_Event_Venue", DbType="VarChar(100)")]
	public string Event_Venue
	{
		get
		{
			return this._Event_Venue;
		}
		set
		{
			if ((this._Event_Venue != value))
			{
				this.OnEvent_VenueChanging(value);
				this.SendPropertyChanging();
				this._Event_Venue = value;
				this.SendPropertyChanged("Event_Venue");
				this.OnEvent_VenueChanged();
			}
		}
	}
	
	[Column(Storage="_Event_Status", DbType="Int")]
	public System.Nullable<int> Event_Status
	{
		get
		{
			return this._Event_Status;
		}
		set
		{
			if ((this._Event_Status != value))
			{
				this.OnEvent_StatusChanging(value);
				this.SendPropertyChanging();
				this._Event_Status = value;
				this.SendPropertyChanged("Event_Status");
				this.OnEvent_StatusChanged();
			}
		}
	}
	
	[Column(Storage="_Event_TimeStamp", DbType="DateTime")]
	public System.Nullable<System.DateTime> Event_TimeStamp
	{
		get
		{
			return this._Event_TimeStamp;
		}
		set
		{
			if ((this._Event_TimeStamp != value))
			{
				this.OnEvent_TimeStampChanging(value);
				this.SendPropertyChanging();
				this._Event_TimeStamp = value;
				this.SendPropertyChanged("Event_TimeStamp");
				this.OnEvent_TimeStampChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Inventory")]
public partial class Inventory : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Inventory_Id;
	
	private string _Inventory_Name;
	
	private System.Nullable<decimal> _Inventory_BuyingPrice;
	
	private System.Nullable<decimal> _Inventory_Threshold;
	
	private System.Nullable<decimal> _Inventory_Quantity;
	
	private string _Inventory_PurchaseUnit;
	
	private System.Nullable<decimal> _Inventory_ConversionUnit;
	
	private System.Nullable<int> _Inventory_Status;
	
	private System.Nullable<System.DateTime> _Inventory_TimeStamp;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInventory_IdChanging(int value);
    partial void OnInventory_IdChanged();
    partial void OnInventory_NameChanging(string value);
    partial void OnInventory_NameChanged();
    partial void OnInventory_BuyingPriceChanging(System.Nullable<decimal> value);
    partial void OnInventory_BuyingPriceChanged();
    partial void OnInventory_ThresholdChanging(System.Nullable<decimal> value);
    partial void OnInventory_ThresholdChanged();
    partial void OnInventory_QuantityChanging(System.Nullable<decimal> value);
    partial void OnInventory_QuantityChanged();
    partial void OnInventory_PurchaseUnitChanging(string value);
    partial void OnInventory_PurchaseUnitChanged();
    partial void OnInventory_ConversionUnitChanging(System.Nullable<decimal> value);
    partial void OnInventory_ConversionUnitChanged();
    partial void OnInventory_StatusChanging(System.Nullable<int> value);
    partial void OnInventory_StatusChanged();
    partial void OnInventory_TimeStampChanging(System.Nullable<System.DateTime> value);
    partial void OnInventory_TimeStampChanged();
    #endregion
	
	public Inventory()
	{
		OnCreated();
	}
	
	[Column(Storage="_Inventory_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Inventory_Id
	{
		get
		{
			return this._Inventory_Id;
		}
		set
		{
			if ((this._Inventory_Id != value))
			{
				this.OnInventory_IdChanging(value);
				this.SendPropertyChanging();
				this._Inventory_Id = value;
				this.SendPropertyChanged("Inventory_Id");
				this.OnInventory_IdChanged();
			}
		}
	}
	
	[Column(Storage="_Inventory_Name", DbType="VarChar(100)")]
	public string Inventory_Name
	{
		get
		{
			return this._Inventory_Name;
		}
		set
		{
			if ((this._Inventory_Name != value))
			{
				this.OnInventory_NameChanging(value);
				this.SendPropertyChanging();
				this._Inventory_Name = value;
				this.SendPropertyChanged("Inventory_Name");
				this.OnInventory_NameChanged();
			}
		}
	}
	
	[Column(Storage="_Inventory_BuyingPrice", DbType="Decimal(6,2)")]
	public System.Nullable<decimal> Inventory_BuyingPrice
	{
		get
		{
			return this._Inventory_BuyingPrice;
		}
		set
		{
			if ((this._Inventory_BuyingPrice != value))
			{
				this.OnInventory_BuyingPriceChanging(value);
				this.SendPropertyChanging();
				this._Inventory_BuyingPrice = value;
				this.SendPropertyChanged("Inventory_BuyingPrice");
				this.OnInventory_BuyingPriceChanged();
			}
		}
	}
	
	[Column(Storage="_Inventory_Threshold", DbType="Decimal(6,2)")]
	public System.Nullable<decimal> Inventory_Threshold
	{
		get
		{
			return this._Inventory_Threshold;
		}
		set
		{
			if ((this._Inventory_Threshold != value))
			{
				this.OnInventory_ThresholdChanging(value);
				this.SendPropertyChanging();
				this._Inventory_Threshold = value;
				this.SendPropertyChanged("Inventory_Threshold");
				this.OnInventory_ThresholdChanged();
			}
		}
	}
	
	[Column(Storage="_Inventory_Quantity", DbType="Decimal(6,2)")]
	public System.Nullable<decimal> Inventory_Quantity
	{
		get
		{
			return this._Inventory_Quantity;
		}
		set
		{
			if ((this._Inventory_Quantity != value))
			{
				this.OnInventory_QuantityChanging(value);
				this.SendPropertyChanging();
				this._Inventory_Quantity = value;
				this.SendPropertyChanged("Inventory_Quantity");
				this.OnInventory_QuantityChanged();
			}
		}
	}
	
	[Column(Storage="_Inventory_PurchaseUnit", DbType="VarChar(100)")]
	public string Inventory_PurchaseUnit
	{
		get
		{
			return this._Inventory_PurchaseUnit;
		}
		set
		{
			if ((this._Inventory_PurchaseUnit != value))
			{
				this.OnInventory_PurchaseUnitChanging(value);
				this.SendPropertyChanging();
				this._Inventory_PurchaseUnit = value;
				this.SendPropertyChanged("Inventory_PurchaseUnit");
				this.OnInventory_PurchaseUnitChanged();
			}
		}
	}
	
	[Column(Storage="_Inventory_ConversionUnit", DbType="Decimal(6,2)")]
	public System.Nullable<decimal> Inventory_ConversionUnit
	{
		get
		{
			return this._Inventory_ConversionUnit;
		}
		set
		{
			if ((this._Inventory_ConversionUnit != value))
			{
				this.OnInventory_ConversionUnitChanging(value);
				this.SendPropertyChanging();
				this._Inventory_ConversionUnit = value;
				this.SendPropertyChanged("Inventory_ConversionUnit");
				this.OnInventory_ConversionUnitChanged();
			}
		}
	}
	
	[Column(Storage="_Inventory_Status", DbType="Int")]
	public System.Nullable<int> Inventory_Status
	{
		get
		{
			return this._Inventory_Status;
		}
		set
		{
			if ((this._Inventory_Status != value))
			{
				this.OnInventory_StatusChanging(value);
				this.SendPropertyChanging();
				this._Inventory_Status = value;
				this.SendPropertyChanged("Inventory_Status");
				this.OnInventory_StatusChanged();
			}
		}
	}
	
	[Column(Storage="_Inventory_TimeStamp", DbType="DateTime")]
	public System.Nullable<System.DateTime> Inventory_TimeStamp
	{
		get
		{
			return this._Inventory_TimeStamp;
		}
		set
		{
			if ((this._Inventory_TimeStamp != value))
			{
				this.OnInventory_TimeStampChanging(value);
				this.SendPropertyChanging();
				this._Inventory_TimeStamp = value;
				this.SendPropertyChanged("Inventory_TimeStamp");
				this.OnInventory_TimeStampChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Invoice")]
public partial class Invoice : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Invoice_Id;
	
	private System.Nullable<decimal> _Invoice_Amount;
	
	private System.Nullable<decimal> _Invoice_Discount;
	
	private System.Nullable<decimal> _Invoice_Tax;
	
	private string _Invoice_Type;
	
	private System.Nullable<int> _Invoice_Source;
	
	private string _Invoice_PaymentMode;
	
	private string _Invoice_Reason;
	
	private System.Nullable<int> _Invoice_Client;
	
	private System.Nullable<int> _Invoice_Status;
	
	private System.Nullable<System.DateTime> _Invoice_TimeStamp;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInvoice_IdChanging(int value);
    partial void OnInvoice_IdChanged();
    partial void OnInvoice_AmountChanging(System.Nullable<decimal> value);
    partial void OnInvoice_AmountChanged();
    partial void OnInvoice_DiscountChanging(System.Nullable<decimal> value);
    partial void OnInvoice_DiscountChanged();
    partial void OnInvoice_TaxChanging(System.Nullable<decimal> value);
    partial void OnInvoice_TaxChanged();
    partial void OnInvoice_TypeChanging(string value);
    partial void OnInvoice_TypeChanged();
    partial void OnInvoice_SourceChanging(System.Nullable<int> value);
    partial void OnInvoice_SourceChanged();
    partial void OnInvoice_PaymentModeChanging(string value);
    partial void OnInvoice_PaymentModeChanged();
    partial void OnInvoice_ReasonChanging(string value);
    partial void OnInvoice_ReasonChanged();
    partial void OnInvoice_ClientChanging(System.Nullable<int> value);
    partial void OnInvoice_ClientChanged();
    partial void OnInvoice_StatusChanging(System.Nullable<int> value);
    partial void OnInvoice_StatusChanged();
    partial void OnInvoice_TimeStampChanging(System.Nullable<System.DateTime> value);
    partial void OnInvoice_TimeStampChanged();
    #endregion
	
	public Invoice()
	{
		OnCreated();
	}
	
	[Column(Storage="_Invoice_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Invoice_Id
	{
		get
		{
			return this._Invoice_Id;
		}
		set
		{
			if ((this._Invoice_Id != value))
			{
				this.OnInvoice_IdChanging(value);
				this.SendPropertyChanging();
				this._Invoice_Id = value;
				this.SendPropertyChanged("Invoice_Id");
				this.OnInvoice_IdChanged();
			}
		}
	}
	
	[Column(Storage="_Invoice_Amount", DbType="Decimal(6,2)")]
	public System.Nullable<decimal> Invoice_Amount
	{
		get
		{
			return this._Invoice_Amount;
		}
		set
		{
			if ((this._Invoice_Amount != value))
			{
				this.OnInvoice_AmountChanging(value);
				this.SendPropertyChanging();
				this._Invoice_Amount = value;
				this.SendPropertyChanged("Invoice_Amount");
				this.OnInvoice_AmountChanged();
			}
		}
	}
	
	[Column(Storage="_Invoice_Discount", DbType="Decimal(6,2)")]
	public System.Nullable<decimal> Invoice_Discount
	{
		get
		{
			return this._Invoice_Discount;
		}
		set
		{
			if ((this._Invoice_Discount != value))
			{
				this.OnInvoice_DiscountChanging(value);
				this.SendPropertyChanging();
				this._Invoice_Discount = value;
				this.SendPropertyChanged("Invoice_Discount");
				this.OnInvoice_DiscountChanged();
			}
		}
	}
	
	[Column(Storage="_Invoice_Tax", DbType="Decimal(6,2)")]
	public System.Nullable<decimal> Invoice_Tax
	{
		get
		{
			return this._Invoice_Tax;
		}
		set
		{
			if ((this._Invoice_Tax != value))
			{
				this.OnInvoice_TaxChanging(value);
				this.SendPropertyChanging();
				this._Invoice_Tax = value;
				this.SendPropertyChanged("Invoice_Tax");
				this.OnInvoice_TaxChanged();
			}
		}
	}
	
	[Column(Storage="_Invoice_Type", DbType="VarChar(50)")]
	public string Invoice_Type
	{
		get
		{
			return this._Invoice_Type;
		}
		set
		{
			if ((this._Invoice_Type != value))
			{
				this.OnInvoice_TypeChanging(value);
				this.SendPropertyChanging();
				this._Invoice_Type = value;
				this.SendPropertyChanged("Invoice_Type");
				this.OnInvoice_TypeChanged();
			}
		}
	}
	
	[Column(Storage="_Invoice_Source", DbType="Int")]
	public System.Nullable<int> Invoice_Source
	{
		get
		{
			return this._Invoice_Source;
		}
		set
		{
			if ((this._Invoice_Source != value))
			{
				this.OnInvoice_SourceChanging(value);
				this.SendPropertyChanging();
				this._Invoice_Source = value;
				this.SendPropertyChanged("Invoice_Source");
				this.OnInvoice_SourceChanged();
			}
		}
	}
	
	[Column(Storage="_Invoice_PaymentMode", DbType="VarChar(100)")]
	public string Invoice_PaymentMode
	{
		get
		{
			return this._Invoice_PaymentMode;
		}
		set
		{
			if ((this._Invoice_PaymentMode != value))
			{
				this.OnInvoice_PaymentModeChanging(value);
				this.SendPropertyChanging();
				this._Invoice_PaymentMode = value;
				this.SendPropertyChanged("Invoice_PaymentMode");
				this.OnInvoice_PaymentModeChanged();
			}
		}
	}
	
	[Column(Storage="_Invoice_Reason", DbType="VarChar(200)")]
	public string Invoice_Reason
	{
		get
		{
			return this._Invoice_Reason;
		}
		set
		{
			if ((this._Invoice_Reason != value))
			{
				this.OnInvoice_ReasonChanging(value);
				this.SendPropertyChanging();
				this._Invoice_Reason = value;
				this.SendPropertyChanged("Invoice_Reason");
				this.OnInvoice_ReasonChanged();
			}
		}
	}
	
	[Column(Storage="_Invoice_Client", DbType="Int")]
	public System.Nullable<int> Invoice_Client
	{
		get
		{
			return this._Invoice_Client;
		}
		set
		{
			if ((this._Invoice_Client != value))
			{
				this.OnInvoice_ClientChanging(value);
				this.SendPropertyChanging();
				this._Invoice_Client = value;
				this.SendPropertyChanged("Invoice_Client");
				this.OnInvoice_ClientChanged();
			}
		}
	}
	
	[Column(Storage="_Invoice_Status", DbType="Int")]
	public System.Nullable<int> Invoice_Status
	{
		get
		{
			return this._Invoice_Status;
		}
		set
		{
			if ((this._Invoice_Status != value))
			{
				this.OnInvoice_StatusChanging(value);
				this.SendPropertyChanging();
				this._Invoice_Status = value;
				this.SendPropertyChanged("Invoice_Status");
				this.OnInvoice_StatusChanged();
			}
		}
	}
	
	[Column(Storage="_Invoice_TimeStamp", DbType="DateTime")]
	public System.Nullable<System.DateTime> Invoice_TimeStamp
	{
		get
		{
			return this._Invoice_TimeStamp;
		}
		set
		{
			if ((this._Invoice_TimeStamp != value))
			{
				this.OnInvoice_TimeStampChanging(value);
				this.SendPropertyChanging();
				this._Invoice_TimeStamp = value;
				this.SendPropertyChanged("Invoice_TimeStamp");
				this.OnInvoice_TimeStampChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Menu")]
public partial class Menu : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Menu_Id;
	
	private string _Menu_Name;
	
	private string _Menu_Category;
	
	private System.Nullable<decimal> _Menu_SellingPrice;
	
	private System.Nullable<int> _Menu_Status;
	
	private System.Nullable<System.DateTime> _Menu_TimeStamp;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMenu_IdChanging(int value);
    partial void OnMenu_IdChanged();
    partial void OnMenu_NameChanging(string value);
    partial void OnMenu_NameChanged();
    partial void OnMenu_CategoryChanging(string value);
    partial void OnMenu_CategoryChanged();
    partial void OnMenu_SellingPriceChanging(System.Nullable<decimal> value);
    partial void OnMenu_SellingPriceChanged();
    partial void OnMenu_StatusChanging(System.Nullable<int> value);
    partial void OnMenu_StatusChanged();
    partial void OnMenu_TimeStampChanging(System.Nullable<System.DateTime> value);
    partial void OnMenu_TimeStampChanged();
    #endregion
	
	public Menu()
	{
		OnCreated();
	}
	
	[Column(Storage="_Menu_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Menu_Id
	{
		get
		{
			return this._Menu_Id;
		}
		set
		{
			if ((this._Menu_Id != value))
			{
				this.OnMenu_IdChanging(value);
				this.SendPropertyChanging();
				this._Menu_Id = value;
				this.SendPropertyChanged("Menu_Id");
				this.OnMenu_IdChanged();
			}
		}
	}
	
	[Column(Storage="_Menu_Name", DbType="VarChar(100)")]
	public string Menu_Name
	{
		get
		{
			return this._Menu_Name;
		}
		set
		{
			if ((this._Menu_Name != value))
			{
				this.OnMenu_NameChanging(value);
				this.SendPropertyChanging();
				this._Menu_Name = value;
				this.SendPropertyChanged("Menu_Name");
				this.OnMenu_NameChanged();
			}
		}
	}
	
	[Column(Storage="_Menu_Category", DbType="VarChar(100)")]
	public string Menu_Category
	{
		get
		{
			return this._Menu_Category;
		}
		set
		{
			if ((this._Menu_Category != value))
			{
				this.OnMenu_CategoryChanging(value);
				this.SendPropertyChanging();
				this._Menu_Category = value;
				this.SendPropertyChanged("Menu_Category");
				this.OnMenu_CategoryChanged();
			}
		}
	}
	
	[Column(Storage="_Menu_SellingPrice", DbType="Decimal(6,2)")]
	public System.Nullable<decimal> Menu_SellingPrice
	{
		get
		{
			return this._Menu_SellingPrice;
		}
		set
		{
			if ((this._Menu_SellingPrice != value))
			{
				this.OnMenu_SellingPriceChanging(value);
				this.SendPropertyChanging();
				this._Menu_SellingPrice = value;
				this.SendPropertyChanged("Menu_SellingPrice");
				this.OnMenu_SellingPriceChanged();
			}
		}
	}
	
	[Column(Storage="_Menu_Status", DbType="Int")]
	public System.Nullable<int> Menu_Status
	{
		get
		{
			return this._Menu_Status;
		}
		set
		{
			if ((this._Menu_Status != value))
			{
				this.OnMenu_StatusChanging(value);
				this.SendPropertyChanging();
				this._Menu_Status = value;
				this.SendPropertyChanged("Menu_Status");
				this.OnMenu_StatusChanged();
			}
		}
	}
	
	[Column(Storage="_Menu_TimeStamp", DbType="DateTime")]
	public System.Nullable<System.DateTime> Menu_TimeStamp
	{
		get
		{
			return this._Menu_TimeStamp;
		}
		set
		{
			if ((this._Menu_TimeStamp != value))
			{
				this.OnMenu_TimeStampChanging(value);
				this.SendPropertyChanging();
				this._Menu_TimeStamp = value;
				this.SendPropertyChanged("Menu_TimeStamp");
				this.OnMenu_TimeStampChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Package")]
public partial class Package : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Package_Id;
	
	private string _Package_Name;
	
	private string _Package_Type;
	
	private string _Package_Comments;
	
	private System.Nullable<int> _Package_Status;
	
	private System.Nullable<System.DateTime> _Package_TimeStamp;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPackage_IdChanging(int value);
    partial void OnPackage_IdChanged();
    partial void OnPackage_NameChanging(string value);
    partial void OnPackage_NameChanged();
    partial void OnPackage_TypeChanging(string value);
    partial void OnPackage_TypeChanged();
    partial void OnPackage_CommentsChanging(string value);
    partial void OnPackage_CommentsChanged();
    partial void OnPackage_StatusChanging(System.Nullable<int> value);
    partial void OnPackage_StatusChanged();
    partial void OnPackage_TimeStampChanging(System.Nullable<System.DateTime> value);
    partial void OnPackage_TimeStampChanged();
    #endregion
	
	public Package()
	{
		OnCreated();
	}
	
	[Column(Storage="_Package_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Package_Id
	{
		get
		{
			return this._Package_Id;
		}
		set
		{
			if ((this._Package_Id != value))
			{
				this.OnPackage_IdChanging(value);
				this.SendPropertyChanging();
				this._Package_Id = value;
				this.SendPropertyChanged("Package_Id");
				this.OnPackage_IdChanged();
			}
		}
	}
	
	[Column(Storage="_Package_Name", DbType="VarChar(100)")]
	public string Package_Name
	{
		get
		{
			return this._Package_Name;
		}
		set
		{
			if ((this._Package_Name != value))
			{
				this.OnPackage_NameChanging(value);
				this.SendPropertyChanging();
				this._Package_Name = value;
				this.SendPropertyChanged("Package_Name");
				this.OnPackage_NameChanged();
			}
		}
	}
	
	[Column(Storage="_Package_Type", DbType="VarChar(50)")]
	public string Package_Type
	{
		get
		{
			return this._Package_Type;
		}
		set
		{
			if ((this._Package_Type != value))
			{
				this.OnPackage_TypeChanging(value);
				this.SendPropertyChanging();
				this._Package_Type = value;
				this.SendPropertyChanged("Package_Type");
				this.OnPackage_TypeChanged();
			}
		}
	}
	
	[Column(Storage="_Package_Comments", DbType="VarChar(200)")]
	public string Package_Comments
	{
		get
		{
			return this._Package_Comments;
		}
		set
		{
			if ((this._Package_Comments != value))
			{
				this.OnPackage_CommentsChanging(value);
				this.SendPropertyChanging();
				this._Package_Comments = value;
				this.SendPropertyChanged("Package_Comments");
				this.OnPackage_CommentsChanged();
			}
		}
	}
	
	[Column(Storage="_Package_Status", DbType="Int")]
	public System.Nullable<int> Package_Status
	{
		get
		{
			return this._Package_Status;
		}
		set
		{
			if ((this._Package_Status != value))
			{
				this.OnPackage_StatusChanging(value);
				this.SendPropertyChanging();
				this._Package_Status = value;
				this.SendPropertyChanged("Package_Status");
				this.OnPackage_StatusChanged();
			}
		}
	}
	
	[Column(Storage="_Package_TimeStamp", DbType="DateTime")]
	public System.Nullable<System.DateTime> Package_TimeStamp
	{
		get
		{
			return this._Package_TimeStamp;
		}
		set
		{
			if ((this._Package_TimeStamp != value))
			{
				this.OnPackage_TimeStampChanging(value);
				this.SendPropertyChanging();
				this._Package_TimeStamp = value;
				this.SendPropertyChanged("Package_TimeStamp");
				this.OnPackage_TimeStampChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.PettyCash")]
public partial class PettyCash : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _PettyCash_Id;
	
	private System.Nullable<decimal> _PettyCash_Amount;
	
	private System.Nullable<decimal> _PettyCash_Balance;
	
	private System.Nullable<int> _PettyCash_GivenBy;
	
	private System.Nullable<int> _PettyCash_ReceivedBy;
	
	private System.Nullable<System.DateTime> _PettyCash_TimeStamp;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPettyCash_IdChanging(int value);
    partial void OnPettyCash_IdChanged();
    partial void OnPettyCash_AmountChanging(System.Nullable<decimal> value);
    partial void OnPettyCash_AmountChanged();
    partial void OnPettyCash_BalanceChanging(System.Nullable<decimal> value);
    partial void OnPettyCash_BalanceChanged();
    partial void OnPettyCash_GivenByChanging(System.Nullable<int> value);
    partial void OnPettyCash_GivenByChanged();
    partial void OnPettyCash_ReceivedByChanging(System.Nullable<int> value);
    partial void OnPettyCash_ReceivedByChanged();
    partial void OnPettyCash_TimeStampChanging(System.Nullable<System.DateTime> value);
    partial void OnPettyCash_TimeStampChanged();
    #endregion
	
	public PettyCash()
	{
		OnCreated();
	}
	
	[Column(Storage="_PettyCash_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int PettyCash_Id
	{
		get
		{
			return this._PettyCash_Id;
		}
		set
		{
			if ((this._PettyCash_Id != value))
			{
				this.OnPettyCash_IdChanging(value);
				this.SendPropertyChanging();
				this._PettyCash_Id = value;
				this.SendPropertyChanged("PettyCash_Id");
				this.OnPettyCash_IdChanged();
			}
		}
	}
	
	[Column(Storage="_PettyCash_Amount", DbType="Decimal(6,2)")]
	public System.Nullable<decimal> PettyCash_Amount
	{
		get
		{
			return this._PettyCash_Amount;
		}
		set
		{
			if ((this._PettyCash_Amount != value))
			{
				this.OnPettyCash_AmountChanging(value);
				this.SendPropertyChanging();
				this._PettyCash_Amount = value;
				this.SendPropertyChanged("PettyCash_Amount");
				this.OnPettyCash_AmountChanged();
			}
		}
	}
	
	[Column(Storage="_PettyCash_Balance", DbType="Decimal(6,2)")]
	public System.Nullable<decimal> PettyCash_Balance
	{
		get
		{
			return this._PettyCash_Balance;
		}
		set
		{
			if ((this._PettyCash_Balance != value))
			{
				this.OnPettyCash_BalanceChanging(value);
				this.SendPropertyChanging();
				this._PettyCash_Balance = value;
				this.SendPropertyChanged("PettyCash_Balance");
				this.OnPettyCash_BalanceChanged();
			}
		}
	}
	
	[Column(Storage="_PettyCash_GivenBy", DbType="Int")]
	public System.Nullable<int> PettyCash_GivenBy
	{
		get
		{
			return this._PettyCash_GivenBy;
		}
		set
		{
			if ((this._PettyCash_GivenBy != value))
			{
				this.OnPettyCash_GivenByChanging(value);
				this.SendPropertyChanging();
				this._PettyCash_GivenBy = value;
				this.SendPropertyChanged("PettyCash_GivenBy");
				this.OnPettyCash_GivenByChanged();
			}
		}
	}
	
	[Column(Storage="_PettyCash_ReceivedBy", DbType="Int")]
	public System.Nullable<int> PettyCash_ReceivedBy
	{
		get
		{
			return this._PettyCash_ReceivedBy;
		}
		set
		{
			if ((this._PettyCash_ReceivedBy != value))
			{
				this.OnPettyCash_ReceivedByChanging(value);
				this.SendPropertyChanging();
				this._PettyCash_ReceivedBy = value;
				this.SendPropertyChanged("PettyCash_ReceivedBy");
				this.OnPettyCash_ReceivedByChanged();
			}
		}
	}
	
	[Column(Storage="_PettyCash_TimeStamp", DbType="DateTime")]
	public System.Nullable<System.DateTime> PettyCash_TimeStamp
	{
		get
		{
			return this._PettyCash_TimeStamp;
		}
		set
		{
			if ((this._PettyCash_TimeStamp != value))
			{
				this.OnPettyCash_TimeStampChanging(value);
				this.SendPropertyChanging();
				this._PettyCash_TimeStamp = value;
				this.SendPropertyChanged("PettyCash_TimeStamp");
				this.OnPettyCash_TimeStampChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.PettyExpense")]
public partial class PettyExpense : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _PettyExpense_Id;
	
	private System.Nullable<decimal> _PettyExpense_Amount;
	
	private string _PettyExpense_Merchandise;
	
	private System.Nullable<decimal> _PettyExpense_Quantity;
	
	private System.Nullable<int> _PettyExpense_ReceivedBy;
	
	private System.Nullable<System.DateTime> _PettyExpense_TimeStamp;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPettyExpense_IdChanging(int value);
    partial void OnPettyExpense_IdChanged();
    partial void OnPettyExpense_AmountChanging(System.Nullable<decimal> value);
    partial void OnPettyExpense_AmountChanged();
    partial void OnPettyExpense_MerchandiseChanging(string value);
    partial void OnPettyExpense_MerchandiseChanged();
    partial void OnPettyExpense_QuantityChanging(System.Nullable<decimal> value);
    partial void OnPettyExpense_QuantityChanged();
    partial void OnPettyExpense_ReceivedByChanging(System.Nullable<int> value);
    partial void OnPettyExpense_ReceivedByChanged();
    partial void OnPettyExpense_TimeStampChanging(System.Nullable<System.DateTime> value);
    partial void OnPettyExpense_TimeStampChanged();
    #endregion
	
	public PettyExpense()
	{
		OnCreated();
	}
	
	[Column(Storage="_PettyExpense_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int PettyExpense_Id
	{
		get
		{
			return this._PettyExpense_Id;
		}
		set
		{
			if ((this._PettyExpense_Id != value))
			{
				this.OnPettyExpense_IdChanging(value);
				this.SendPropertyChanging();
				this._PettyExpense_Id = value;
				this.SendPropertyChanged("PettyExpense_Id");
				this.OnPettyExpense_IdChanged();
			}
		}
	}
	
	[Column(Storage="_PettyExpense_Amount", DbType="Decimal(6,2)")]
	public System.Nullable<decimal> PettyExpense_Amount
	{
		get
		{
			return this._PettyExpense_Amount;
		}
		set
		{
			if ((this._PettyExpense_Amount != value))
			{
				this.OnPettyExpense_AmountChanging(value);
				this.SendPropertyChanging();
				this._PettyExpense_Amount = value;
				this.SendPropertyChanged("PettyExpense_Amount");
				this.OnPettyExpense_AmountChanged();
			}
		}
	}
	
	[Column(Storage="_PettyExpense_Merchandise", DbType="VarChar(200)")]
	public string PettyExpense_Merchandise
	{
		get
		{
			return this._PettyExpense_Merchandise;
		}
		set
		{
			if ((this._PettyExpense_Merchandise != value))
			{
				this.OnPettyExpense_MerchandiseChanging(value);
				this.SendPropertyChanging();
				this._PettyExpense_Merchandise = value;
				this.SendPropertyChanged("PettyExpense_Merchandise");
				this.OnPettyExpense_MerchandiseChanged();
			}
		}
	}
	
	[Column(Storage="_PettyExpense_Quantity", DbType="Decimal(6,2)")]
	public System.Nullable<decimal> PettyExpense_Quantity
	{
		get
		{
			return this._PettyExpense_Quantity;
		}
		set
		{
			if ((this._PettyExpense_Quantity != value))
			{
				this.OnPettyExpense_QuantityChanging(value);
				this.SendPropertyChanging();
				this._PettyExpense_Quantity = value;
				this.SendPropertyChanged("PettyExpense_Quantity");
				this.OnPettyExpense_QuantityChanged();
			}
		}
	}
	
	[Column(Storage="_PettyExpense_ReceivedBy", DbType="Int")]
	public System.Nullable<int> PettyExpense_ReceivedBy
	{
		get
		{
			return this._PettyExpense_ReceivedBy;
		}
		set
		{
			if ((this._PettyExpense_ReceivedBy != value))
			{
				this.OnPettyExpense_ReceivedByChanging(value);
				this.SendPropertyChanging();
				this._PettyExpense_ReceivedBy = value;
				this.SendPropertyChanged("PettyExpense_ReceivedBy");
				this.OnPettyExpense_ReceivedByChanged();
			}
		}
	}
	
	[Column(Storage="_PettyExpense_TimeStamp", DbType="DateTime")]
	public System.Nullable<System.DateTime> PettyExpense_TimeStamp
	{
		get
		{
			return this._PettyExpense_TimeStamp;
		}
		set
		{
			if ((this._PettyExpense_TimeStamp != value))
			{
				this.OnPettyExpense_TimeStampChanging(value);
				this.SendPropertyChanging();
				this._PettyExpense_TimeStamp = value;
				this.SendPropertyChanged("PettyExpense_TimeStamp");
				this.OnPettyExpense_TimeStampChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Purchase")]
public partial class Purchase : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Purchase_Id;
	
	private System.Nullable<int> _Purchase_Inventory;
	
	private System.Nullable<decimal> _Purchase_Quantity;
	
	private System.Nullable<int> _Purchase_Status;
	
	private System.DateTime _Purchase_TimeStamp;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPurchase_IdChanging(int value);
    partial void OnPurchase_IdChanged();
    partial void OnPurchase_InventoryChanging(System.Nullable<int> value);
    partial void OnPurchase_InventoryChanged();
    partial void OnPurchase_QuantityChanging(System.Nullable<decimal> value);
    partial void OnPurchase_QuantityChanged();
    partial void OnPurchase_StatusChanging(System.Nullable<int> value);
    partial void OnPurchase_StatusChanged();
    partial void OnPurchase_TimeStampChanging(System.DateTime value);
    partial void OnPurchase_TimeStampChanged();
    #endregion
	
	public Purchase()
	{
		OnCreated();
	}
	
	[Column(Storage="_Purchase_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Purchase_Id
	{
		get
		{
			return this._Purchase_Id;
		}
		set
		{
			if ((this._Purchase_Id != value))
			{
				this.OnPurchase_IdChanging(value);
				this.SendPropertyChanging();
				this._Purchase_Id = value;
				this.SendPropertyChanged("Purchase_Id");
				this.OnPurchase_IdChanged();
			}
		}
	}
	
	[Column(Storage="_Purchase_Inventory", DbType="Int")]
	public System.Nullable<int> Purchase_Inventory
	{
		get
		{
			return this._Purchase_Inventory;
		}
		set
		{
			if ((this._Purchase_Inventory != value))
			{
				this.OnPurchase_InventoryChanging(value);
				this.SendPropertyChanging();
				this._Purchase_Inventory = value;
				this.SendPropertyChanged("Purchase_Inventory");
				this.OnPurchase_InventoryChanged();
			}
		}
	}
	
	[Column(Storage="_Purchase_Quantity", DbType="Decimal(6,2)")]
	public System.Nullable<decimal> Purchase_Quantity
	{
		get
		{
			return this._Purchase_Quantity;
		}
		set
		{
			if ((this._Purchase_Quantity != value))
			{
				this.OnPurchase_QuantityChanging(value);
				this.SendPropertyChanging();
				this._Purchase_Quantity = value;
				this.SendPropertyChanged("Purchase_Quantity");
				this.OnPurchase_QuantityChanged();
			}
		}
	}
	
	[Column(Storage="_Purchase_Status", DbType="Int")]
	public System.Nullable<int> Purchase_Status
	{
		get
		{
			return this._Purchase_Status;
		}
		set
		{
			if ((this._Purchase_Status != value))
			{
				this.OnPurchase_StatusChanging(value);
				this.SendPropertyChanging();
				this._Purchase_Status = value;
				this.SendPropertyChanged("Purchase_Status");
				this.OnPurchase_StatusChanged();
			}
		}
	}
	
	[Column(Storage="_Purchase_TimeStamp", DbType="DateTime NOT NULL")]
	public System.DateTime Purchase_TimeStamp
	{
		get
		{
			return this._Purchase_TimeStamp;
		}
		set
		{
			if ((this._Purchase_TimeStamp != value))
			{
				this.OnPurchase_TimeStampChanging(value);
				this.SendPropertyChanging();
				this._Purchase_TimeStamp = value;
				this.SendPropertyChanged("Purchase_TimeStamp");
				this.OnPurchase_TimeStampChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Sales")]
public partial class Sale : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Sales_Id;
	
	private System.Nullable<int> _Sales_Menu;
	
	private System.Nullable<decimal> _Sales_Quantity;
	
	private System.Nullable<decimal> _Sales_Cost;
	
	private System.Nullable<int> _Sales_Source;
	
	private System.Nullable<int> _Sales_Package;
	
	private System.Nullable<int> _Sales_Status;
	
	private System.Nullable<System.DateTime> _Sales_TimeStamp;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSales_IdChanging(int value);
    partial void OnSales_IdChanged();
    partial void OnSales_MenuChanging(System.Nullable<int> value);
    partial void OnSales_MenuChanged();
    partial void OnSales_QuantityChanging(System.Nullable<decimal> value);
    partial void OnSales_QuantityChanged();
    partial void OnSales_CostChanging(System.Nullable<decimal> value);
    partial void OnSales_CostChanged();
    partial void OnSales_SourceChanging(System.Nullable<int> value);
    partial void OnSales_SourceChanged();
    partial void OnSales_PackageChanging(System.Nullable<int> value);
    partial void OnSales_PackageChanged();
    partial void OnSales_StatusChanging(System.Nullable<int> value);
    partial void OnSales_StatusChanged();
    partial void OnSales_TimeStampChanging(System.Nullable<System.DateTime> value);
    partial void OnSales_TimeStampChanged();
    #endregion
	
	public Sale()
	{
		OnCreated();
	}
	
	[Column(Storage="_Sales_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Sales_Id
	{
		get
		{
			return this._Sales_Id;
		}
		set
		{
			if ((this._Sales_Id != value))
			{
				this.OnSales_IdChanging(value);
				this.SendPropertyChanging();
				this._Sales_Id = value;
				this.SendPropertyChanged("Sales_Id");
				this.OnSales_IdChanged();
			}
		}
	}
	
	[Column(Storage="_Sales_Menu", DbType="Int")]
	public System.Nullable<int> Sales_Menu
	{
		get
		{
			return this._Sales_Menu;
		}
		set
		{
			if ((this._Sales_Menu != value))
			{
				this.OnSales_MenuChanging(value);
				this.SendPropertyChanging();
				this._Sales_Menu = value;
				this.SendPropertyChanged("Sales_Menu");
				this.OnSales_MenuChanged();
			}
		}
	}
	
	[Column(Storage="_Sales_Quantity", DbType="Decimal(6,2)")]
	public System.Nullable<decimal> Sales_Quantity
	{
		get
		{
			return this._Sales_Quantity;
		}
		set
		{
			if ((this._Sales_Quantity != value))
			{
				this.OnSales_QuantityChanging(value);
				this.SendPropertyChanging();
				this._Sales_Quantity = value;
				this.SendPropertyChanged("Sales_Quantity");
				this.OnSales_QuantityChanged();
			}
		}
	}
	
	[Column(Storage="_Sales_Cost", DbType="Decimal(6,2)")]
	public System.Nullable<decimal> Sales_Cost
	{
		get
		{
			return this._Sales_Cost;
		}
		set
		{
			if ((this._Sales_Cost != value))
			{
				this.OnSales_CostChanging(value);
				this.SendPropertyChanging();
				this._Sales_Cost = value;
				this.SendPropertyChanged("Sales_Cost");
				this.OnSales_CostChanged();
			}
		}
	}
	
	[Column(Storage="_Sales_Source", DbType="Int")]
	public System.Nullable<int> Sales_Source
	{
		get
		{
			return this._Sales_Source;
		}
		set
		{
			if ((this._Sales_Source != value))
			{
				this.OnSales_SourceChanging(value);
				this.SendPropertyChanging();
				this._Sales_Source = value;
				this.SendPropertyChanged("Sales_Source");
				this.OnSales_SourceChanged();
			}
		}
	}
	
	[Column(Storage="_Sales_Package", DbType="Int")]
	public System.Nullable<int> Sales_Package
	{
		get
		{
			return this._Sales_Package;
		}
		set
		{
			if ((this._Sales_Package != value))
			{
				this.OnSales_PackageChanging(value);
				this.SendPropertyChanging();
				this._Sales_Package = value;
				this.SendPropertyChanged("Sales_Package");
				this.OnSales_PackageChanged();
			}
		}
	}
	
	[Column(Storage="_Sales_Status", DbType="Int")]
	public System.Nullable<int> Sales_Status
	{
		get
		{
			return this._Sales_Status;
		}
		set
		{
			if ((this._Sales_Status != value))
			{
				this.OnSales_StatusChanging(value);
				this.SendPropertyChanging();
				this._Sales_Status = value;
				this.SendPropertyChanged("Sales_Status");
				this.OnSales_StatusChanged();
			}
		}
	}
	
	[Column(Storage="_Sales_TimeStamp", DbType="DateTime")]
	public System.Nullable<System.DateTime> Sales_TimeStamp
	{
		get
		{
			return this._Sales_TimeStamp;
		}
		set
		{
			if ((this._Sales_TimeStamp != value))
			{
				this.OnSales_TimeStampChanging(value);
				this.SendPropertyChanging();
				this._Sales_TimeStamp = value;
				this.SendPropertyChanged("Sales_TimeStamp");
				this.OnSales_TimeStampChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Source")]
public partial class Source : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Source_Id;
	
	private string _Source_Type;
	
	private System.Nullable<int> _Source_Number;
	
	private System.Nullable<decimal> _Source_AmountPayable;
	
	private System.Nullable<int> _Source_Status;
	
	private System.Nullable<System.DateTime> _Source_TimeStamp;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSource_IdChanging(int value);
    partial void OnSource_IdChanged();
    partial void OnSource_TypeChanging(string value);
    partial void OnSource_TypeChanged();
    partial void OnSource_NumberChanging(System.Nullable<int> value);
    partial void OnSource_NumberChanged();
    partial void OnSource_AmountPayableChanging(System.Nullable<decimal> value);
    partial void OnSource_AmountPayableChanged();
    partial void OnSource_StatusChanging(System.Nullable<int> value);
    partial void OnSource_StatusChanged();
    partial void OnSource_TimeStampChanging(System.Nullable<System.DateTime> value);
    partial void OnSource_TimeStampChanged();
    #endregion
	
	public Source()
	{
		OnCreated();
	}
	
	[Column(Storage="_Source_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Source_Id
	{
		get
		{
			return this._Source_Id;
		}
		set
		{
			if ((this._Source_Id != value))
			{
				this.OnSource_IdChanging(value);
				this.SendPropertyChanging();
				this._Source_Id = value;
				this.SendPropertyChanged("Source_Id");
				this.OnSource_IdChanged();
			}
		}
	}
	
	[Column(Storage="_Source_Type", DbType="VarChar(50)")]
	public string Source_Type
	{
		get
		{
			return this._Source_Type;
		}
		set
		{
			if ((this._Source_Type != value))
			{
				this.OnSource_TypeChanging(value);
				this.SendPropertyChanging();
				this._Source_Type = value;
				this.SendPropertyChanged("Source_Type");
				this.OnSource_TypeChanged();
			}
		}
	}
	
	[Column(Storage="_Source_Number", DbType="Int")]
	public System.Nullable<int> Source_Number
	{
		get
		{
			return this._Source_Number;
		}
		set
		{
			if ((this._Source_Number != value))
			{
				this.OnSource_NumberChanging(value);
				this.SendPropertyChanging();
				this._Source_Number = value;
				this.SendPropertyChanged("Source_Number");
				this.OnSource_NumberChanged();
			}
		}
	}
	
	[Column(Storage="_Source_AmountPayable", DbType="Decimal(6,2)")]
	public System.Nullable<decimal> Source_AmountPayable
	{
		get
		{
			return this._Source_AmountPayable;
		}
		set
		{
			if ((this._Source_AmountPayable != value))
			{
				this.OnSource_AmountPayableChanging(value);
				this.SendPropertyChanging();
				this._Source_AmountPayable = value;
				this.SendPropertyChanged("Source_AmountPayable");
				this.OnSource_AmountPayableChanged();
			}
		}
	}
	
	[Column(Storage="_Source_Status", DbType="Int")]
	public System.Nullable<int> Source_Status
	{
		get
		{
			return this._Source_Status;
		}
		set
		{
			if ((this._Source_Status != value))
			{
				this.OnSource_StatusChanging(value);
				this.SendPropertyChanging();
				this._Source_Status = value;
				this.SendPropertyChanged("Source_Status");
				this.OnSource_StatusChanged();
			}
		}
	}
	
	[Column(Storage="_Source_TimeStamp", DbType="DateTime")]
	public System.Nullable<System.DateTime> Source_TimeStamp
	{
		get
		{
			return this._Source_TimeStamp;
		}
		set
		{
			if ((this._Source_TimeStamp != value))
			{
				this.OnSource_TimeStampChanging(value);
				this.SendPropertyChanging();
				this._Source_TimeStamp = value;
				this.SendPropertyChanged("Source_TimeStamp");
				this.OnSource_TimeStampChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
